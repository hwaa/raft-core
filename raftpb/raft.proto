syntax = "proto2";
package raftpb;

option go_package = "github.com/hwaa/raft-core/raftpb";


enum EntryType {
    EntryNormal     = 0;
    EntryConfChange = 1;
}

message Entry {
    required EntryType  Type = 1; //specify the entry-type
    required uint64     Term = 2; //Entry term is required
    required uint64     Index = 3; //Entry Index is required
    optional bytes      Data  = 4;
}

message SnapShotMetadata {
    optional uint64     index     = 2;
    optional uint64     term      = 3;
}

message Snapshot {
    optional bytes            data = 1;
    optional SnapShotMetadata metadata = 2;
}

enum MessageType {
    MsgHup          = 0;    //tell candidate/follower to become a candidate and start a new election  if no heartbeat message is received
    MsgBeat         = 1;    //an internal signal that leader uses to send heartbeat to follower
    MsgProp         = 2;    //append data to log entries. redirect proposals to leader...
    MsgApp          = 3;    //contains log entries to replicate.
    MsgAppRes       = 4;
    MsgVote         = 5;
    MsgVoteResp     = 6;
    MsgSnap         = 7;
    MsgHeartBeat    = 8;
    MsgHeartbeatRes = 9;
    MsgSnapStatus   = 10;
    MsgPreVote      = 11;
    MsgPreVoteRes   = 12;
    MsgUnreachable  = 13;   //tells the request message wasn't delivered. often indicating 'MsgApp' is unreachable
    //additional property
    MsgCheckQuorum     = 14;
    MsgTransferLeader  = 15;
    MsgTimeoutNow      = 16;
    MsgReadIndex       = 17;
    MsgReadIndexRes    = 18;
}

message Message {
    optional MessageType type        = 1;
    optional uint64      to          = 2;
    optional uint64      from        = 3;
    optional uint64      term        = 4;
    optional uint64      logTerm     = 5;
    optional uint64      index       = 6;
    repeated Entry       entries     = 7;
    optional uint64      commit      = 8;
    optional Snapshot    snapshot    = 9;
    optional bool        reject      = 10;
    optional uint64      rejectHint  = 11;
    optional bytes       context     = 12;
}

message HardState {
    optional uint64 term   = 1;
    optional uint64 vote   = 2;
    optional uint64 commit = 3;
}

enum ConfChangeType {
    ConfChangeAddNode    = 0;
    ConfChangeRemoveNode = 1;
    ConfChangeUpdateNode = 2;
}

message ConfChange {
    optional uint64          ID      = 1;
    optional ConfChangeType  Type    = 2;
    optional uint64          NodeID  = 3;
    optional bytes           Context = 4;
}
