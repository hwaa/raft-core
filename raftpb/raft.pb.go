// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raft.proto

package raftpb

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LogEntry struct {
	Term uint64 `protobuf:"varint,1,req,name=term" json:"term"`
	Idx  uint64 `protobuf:"varint,2,req,name=idx" json:"idx"`
	Data string `protobuf:"bytes,3,opt,name=data" json:"data"`
	// denotes if this entry is for configuration
	Config bool `protobuf:"varint,4,opt,name=config" json:"config"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}
func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return m.Size()
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetIdx() uint64 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *LogEntry) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *LogEntry) GetConfig() bool {
	if m != nil {
		return m.Config
	}
	return false
}

type AppendEntries struct {
	Term           uint64      `protobuf:"varint,1,req,name=term" json:"term"`
	LeaderId       string      `protobuf:"bytes,2,opt,name=leader_id,json=leaderId" json:"leader_id"`
	PrevLogIdx     uint64      `protobuf:"varint,3,opt,name=prev_log_idx,json=prevLogIdx" json:"prev_log_idx"`
	PrevLogTerm    uint64      `protobuf:"varint,4,opt,name=prev_log_term,json=prevLogTerm" json:"prev_log_term"`
	Entries        []*LogEntry `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
	Leade11RCommit uint64      `protobuf:"varint,6,opt,name=leade11r_commit,json=leade11rCommit" json:"leade11r_commit"`
	Id             uint64      `protobuf:"varint,7,opt,name=id" json:"id"`
}

func (m *AppendEntries) Reset()         { *m = AppendEntries{} }
func (m *AppendEntries) String() string { return proto.CompactTextString(m) }
func (*AppendEntries) ProtoMessage()    {}
func (*AppendEntries) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}
func (m *AppendEntries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppendEntries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppendEntries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppendEntries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntries.Merge(m, src)
}
func (m *AppendEntries) XXX_Size() int {
	return m.Size()
}
func (m *AppendEntries) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntries.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntries proto.InternalMessageInfo

func (m *AppendEntries) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntries) GetLeaderId() string {
	if m != nil {
		return m.LeaderId
	}
	return ""
}

func (m *AppendEntries) GetPrevLogIdx() uint64 {
	if m != nil {
		return m.PrevLogIdx
	}
	return 0
}

func (m *AppendEntries) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntries) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *AppendEntries) GetLeade11RCommit() uint64 {
	if m != nil {
		return m.Leade11RCommit
	}
	return 0
}

func (m *AppendEntries) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AppendEntriesRes struct {
	Term    uint64 `protobuf:"varint,1,req,name=term" json:"term"`
	Success bool   `protobuf:"varint,2,req,name=success" json:"success"`
	//
	// server's last log entry index,
	// to help leader's next_idx for this
	// server to converge to correct value quickly
	MatchIdx uint64 `protobuf:"varint,3,opt,name=match_idx,json=matchIdx" json:"match_idx"`
	Id       uint64 `protobuf:"varint,4,opt,name=id" json:"id"`
}

func (m *AppendEntriesRes) Reset()         { *m = AppendEntriesRes{} }
func (m *AppendEntriesRes) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesRes) ProtoMessage()    {}
func (*AppendEntriesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{2}
}
func (m *AppendEntriesRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppendEntriesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppendEntriesRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppendEntriesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesRes.Merge(m, src)
}
func (m *AppendEntriesRes) XXX_Size() int {
	return m.Size()
}
func (m *AppendEntriesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesRes.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesRes proto.InternalMessageInfo

func (m *AppendEntriesRes) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRes) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AppendEntriesRes) GetMatchIdx() uint64 {
	if m != nil {
		return m.MatchIdx
	}
	return 0
}

func (m *AppendEntriesRes) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RequestVote struct {
	Term        uint64 `protobuf:"varint,1,req,name=term" json:"term"`
	CandidateId string `protobuf:"bytes,2,opt,name=candidate_id,json=candidateId" json:"candidate_id"`
	LastLogIdx  uint64 `protobuf:"varint,3,opt,name=last_log_idx,json=lastLogIdx" json:"last_log_idx"`
	LastLogTerm uint64 `protobuf:"varint,4,opt,name=last_log_term,json=lastLogTerm" json:"last_log_term"`
	EarlyVote   bool   `protobuf:"varint,5,opt,name=early_vote,json=earlyVote" json:"early_vote"`
}

func (m *RequestVote) Reset()         { *m = RequestVote{} }
func (m *RequestVote) String() string { return proto.CompactTextString(m) }
func (*RequestVote) ProtoMessage()    {}
func (*RequestVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{3}
}
func (m *RequestVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVote.Merge(m, src)
}
func (m *RequestVote) XXX_Size() int {
	return m.Size()
}
func (m *RequestVote) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVote.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVote proto.InternalMessageInfo

func (m *RequestVote) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVote) GetCandidateId() string {
	if m != nil {
		return m.CandidateId
	}
	return ""
}

func (m *RequestVote) GetLastLogIdx() uint64 {
	if m != nil {
		return m.LastLogIdx
	}
	return 0
}

func (m *RequestVote) GetLastLogTerm() uint64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

func (m *RequestVote) GetEarlyVote() bool {
	if m != nil {
		return m.EarlyVote
	}
	return false
}

type RequestVoteRes struct {
	Term        uint64 `protobuf:"varint,1,req,name=term" json:"term"`
	VoteGranted bool   `protobuf:"varint,2,req,name=vote_granted,json=voteGranted" json:"vote_granted"`
}

func (m *RequestVoteRes) Reset()         { *m = RequestVoteRes{} }
func (m *RequestVoteRes) String() string { return proto.CompactTextString(m) }
func (*RequestVoteRes) ProtoMessage()    {}
func (*RequestVoteRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{4}
}
func (m *RequestVoteRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestVoteRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestVoteRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestVoteRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteRes.Merge(m, src)
}
func (m *RequestVoteRes) XXX_Size() int {
	return m.Size()
}
func (m *RequestVoteRes) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteRes.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteRes proto.InternalMessageInfo

func (m *RequestVoteRes) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRes) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

func init() {
	proto.RegisterType((*LogEntry)(nil), "raftpb.LogEntry")
	proto.RegisterType((*AppendEntries)(nil), "raftpb.AppendEntries")
	proto.RegisterType((*AppendEntriesRes)(nil), "raftpb.AppendEntriesRes")
	proto.RegisterType((*RequestVote)(nil), "raftpb.RequestVote")
	proto.RegisterType((*RequestVoteRes)(nil), "raftpb.RequestVoteRes")
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor_b042552c306ae59b) }

var fileDescriptor_b042552c306ae59b = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x14, 0x8c, 0x1d, 0x37, 0x1f, 0xcf, 0x69, 0x5a, 0x19, 0xa8, 0x56, 0x15, 0x32, 0x21, 0x48, 0x6d,
	0x84, 0x44, 0x50, 0x7b, 0x41, 0x82, 0x53, 0x5b, 0x21, 0x54, 0xa9, 0x27, 0x17, 0x71, 0xe0, 0x62,
	0x2d, 0xde, 0x97, 0x60, 0x29, 0xf6, 0x9a, 0xf5, 0x26, 0xb4, 0x37, 0x2e, 0x70, 0x85, 0x7f, 0x45,
	0x8f, 0x3d, 0x72, 0x42, 0x28, 0xf9, 0x23, 0x68, 0xd7, 0xd9, 0xe0, 0xb4, 0x51, 0x24, 0x7a, 0xb3,
	0x66, 0xe6, 0xed, 0x1b, 0xcf, 0x3c, 0x00, 0x41, 0x07, 0xb2, 0x9f, 0x09, 0x2e, 0xb9, 0x57, 0x53,
	0xdf, 0xd9, 0x87, 0xae, 0x84, 0xc6, 0x19, 0x1f, 0xbe, 0x4e, 0xa5, 0xb8, 0xf4, 0x08, 0x38, 0x12,
	0x45, 0x42, 0xac, 0x8e, 0xdd, 0x73, 0x8e, 0x9d, 0xab, 0xdf, 0x8f, 0x2a, 0x81, 0x46, 0xbc, 0x1d,
	0xa8, 0xc6, 0xec, 0x82, 0xd8, 0x25, 0x42, 0x01, 0x6a, 0x82, 0x51, 0x49, 0x49, 0xb5, 0x63, 0xf5,
	0x9a, 0x66, 0x42, 0x21, 0xde, 0x43, 0xa8, 0x45, 0x3c, 0x1d, 0xc4, 0x43, 0xe2, 0x74, 0xac, 0x5e,
	0x63, 0xce, 0xcd, 0xb1, 0xee, 0x77, 0x1b, 0x36, 0x8f, 0xb2, 0x0c, 0x53, 0xa6, 0x36, 0xc7, 0x98,
	0xaf, 0xd9, 0xfd, 0x18, 0x9a, 0x23, 0xa4, 0x0c, 0x45, 0x18, 0x33, 0x62, 0x97, 0x16, 0x35, 0x0a,
	0xf8, 0x94, 0x79, 0x7b, 0xd0, 0xca, 0x04, 0x4e, 0xc2, 0x11, 0x1f, 0x86, 0xca, 0xa7, 0xb2, 0x63,
	0x1e, 0x01, 0xc5, 0x9c, 0xf1, 0xe1, 0x29, 0xbb, 0xf0, 0x7a, 0xb0, 0xb9, 0xd0, 0xe9, 0x6d, 0x4e,
	0x49, 0xe8, 0xce, 0x85, 0x6f, 0xd5, 0xd2, 0xa7, 0x50, 0xc7, 0xc2, 0x19, 0xd9, 0xe8, 0x54, 0x7b,
	0xee, 0xe1, 0x76, 0xbf, 0x08, 0xac, 0x6f, 0xd2, 0x0a, 0x8c, 0xc0, 0x7b, 0x06, 0x5b, 0xda, 0xc9,
	0xc1, 0x81, 0x08, 0x23, 0x9e, 0x24, 0xb1, 0x24, 0xb5, 0xd2, 0xbb, 0x6d, 0x43, 0x9e, 0x68, 0xce,
	0xbb, 0x0f, 0x76, 0xcc, 0x48, 0xbd, 0xa4, 0xb0, 0x63, 0xd6, 0xfd, 0x6a, 0xc1, 0xf6, 0x52, 0x22,
	0xc1, 0xda, 0x50, 0x7c, 0xa8, 0xe7, 0xe3, 0x28, 0xc2, 0x3c, 0xd7, 0xa5, 0x98, 0x7c, 0x0d, 0xa8,
	0x42, 0x4b, 0xa8, 0x8c, 0x3e, 0xde, 0x8a, 0xa3, 0xa1, 0x61, 0x15, 0x46, 0xe1, 0xc3, 0xb9, 0xe1,
	0xe3, 0xa7, 0x05, 0x6e, 0x80, 0x9f, 0xc6, 0x98, 0xcb, 0x77, 0x5c, 0xe2, 0x1a, 0x0b, 0xfb, 0xd0,
	0x8a, 0x68, 0xca, 0x62, 0x46, 0x25, 0xde, 0xac, 0xc6, 0x5d, 0x30, 0x45, 0x3b, 0x23, 0x9a, 0xcb,
	0xd5, 0xed, 0x28, 0xe6, 0x5f, 0x3b, 0x0b, 0xdd, 0xed, 0x76, 0xe6, 0x42, 0xdd, 0xce, 0x13, 0x00,
	0xa4, 0x62, 0x74, 0x19, 0x4e, 0xb8, 0x44, 0xb2, 0x51, 0x3a, 0xb0, 0xa6, 0xc6, 0x95, 0xf3, 0xee,
	0x39, 0xb4, 0x4b, 0x3f, 0xb2, 0x3e, 0xce, 0x7d, 0x68, 0xa9, 0xa7, 0xc2, 0xa1, 0xa0, 0xa9, 0x44,
	0xb6, 0x94, 0xa9, 0xab, 0x98, 0x37, 0x05, 0x71, 0xf8, 0xcd, 0x86, 0xad, 0x80, 0x0e, 0xe4, 0x09,
	0x17, 0x78, 0x8e, 0x62, 0x12, 0x47, 0xe8, 0xbd, 0x04, 0x57, 0xc6, 0x09, 0xf2, 0xb1, 0x0c, 0x53,
	0xfe, 0xd9, 0xbb, 0x67, 0x2e, 0xa5, 0xb4, 0x7d, 0x77, 0x67, 0x05, 0xa8, 0x2c, 0xbd, 0x80, 0x46,
	0x26, 0x50, 0xff, 0xc7, 0xff, 0x0d, 0xbe, 0x82, 0x96, 0x28, 0x90, 0x3b, 0x0c, 0x1f, 0x41, 0x9b,
	0xea, 0x5b, 0x0b, 0xcd, 0x0d, 0x3f, 0x30, 0xca, 0xa5, 0x1b, 0xdc, 0x25, 0x2b, 0xe1, 0x00, 0xf3,
	0xe3, 0xbd, 0xab, 0xa9, 0x6f, 0x5d, 0x4f, 0x7d, 0xeb, 0xcf, 0xd4, 0xb7, 0x7e, 0xcc, 0xfc, 0xca,
	0xf5, 0xcc, 0xaf, 0xfc, 0x9a, 0xf9, 0x95, 0xf7, 0xcd, 0x7e, 0xff, 0x79, 0x31, 0xf5, 0xc5, 0xb2,
	0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x20, 0xe7, 0xd6, 0xeb, 0x74, 0x04, 0x00, 0x00,
}

func (m *LogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.Config {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x20
	i -= len(m.Data)
	copy(dAtA[i:], m.Data)
	i = encodeVarintRaft(dAtA, i, uint64(len(m.Data)))
	i--
	dAtA[i] = 0x1a
	i = encodeVarintRaft(dAtA, i, uint64(m.Idx))
	i--
	dAtA[i] = 0x10
	i = encodeVarintRaft(dAtA, i, uint64(m.Term))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AppendEntries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendEntries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppendEntries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintRaft(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x38
	i = encodeVarintRaft(dAtA, i, uint64(m.Leade11RCommit))
	i--
	dAtA[i] = 0x30
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRaft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	i = encodeVarintRaft(dAtA, i, uint64(m.PrevLogTerm))
	i--
	dAtA[i] = 0x20
	i = encodeVarintRaft(dAtA, i, uint64(m.PrevLogIdx))
	i--
	dAtA[i] = 0x18
	i -= len(m.LeaderId)
	copy(dAtA[i:], m.LeaderId)
	i = encodeVarintRaft(dAtA, i, uint64(len(m.LeaderId)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintRaft(dAtA, i, uint64(m.Term))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *AppendEntriesRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppendEntriesRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AppendEntriesRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i = encodeVarintRaft(dAtA, i, uint64(m.Id))
	i--
	dAtA[i] = 0x20
	i = encodeVarintRaft(dAtA, i, uint64(m.MatchIdx))
	i--
	dAtA[i] = 0x18
	i--
	if m.Success {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintRaft(dAtA, i, uint64(m.Term))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RequestVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.EarlyVote {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x28
	i = encodeVarintRaft(dAtA, i, uint64(m.LastLogTerm))
	i--
	dAtA[i] = 0x20
	i = encodeVarintRaft(dAtA, i, uint64(m.LastLogIdx))
	i--
	dAtA[i] = 0x18
	i -= len(m.CandidateId)
	copy(dAtA[i:], m.CandidateId)
	i = encodeVarintRaft(dAtA, i, uint64(len(m.CandidateId)))
	i--
	dAtA[i] = 0x12
	i = encodeVarintRaft(dAtA, i, uint64(m.Term))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func (m *RequestVoteRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestVoteRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestVoteRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	i--
	if m.VoteGranted {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i--
	dAtA[i] = 0x10
	i = encodeVarintRaft(dAtA, i, uint64(m.Term))
	i--
	dAtA[i] = 0x8
	return len(dAtA) - i, nil
}

func encodeVarintRaft(dAtA []byte, offset int, v uint64) int {
	offset -= sovRaft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LogEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRaft(uint64(m.Term))
	n += 1 + sovRaft(uint64(m.Idx))
	l = len(m.Data)
	n += 1 + l + sovRaft(uint64(l))
	n += 2
	return n
}

func (m *AppendEntries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRaft(uint64(m.Term))
	l = len(m.LeaderId)
	n += 1 + l + sovRaft(uint64(l))
	n += 1 + sovRaft(uint64(m.PrevLogIdx))
	n += 1 + sovRaft(uint64(m.PrevLogTerm))
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovRaft(uint64(l))
		}
	}
	n += 1 + sovRaft(uint64(m.Leade11RCommit))
	n += 1 + sovRaft(uint64(m.Id))
	return n
}

func (m *AppendEntriesRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRaft(uint64(m.Term))
	n += 2
	n += 1 + sovRaft(uint64(m.MatchIdx))
	n += 1 + sovRaft(uint64(m.Id))
	return n
}

func (m *RequestVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRaft(uint64(m.Term))
	l = len(m.CandidateId)
	n += 1 + l + sovRaft(uint64(l))
	n += 1 + sovRaft(uint64(m.LastLogIdx))
	n += 1 + sovRaft(uint64(m.LastLogTerm))
	n += 2
	return n
}

func (m *RequestVoteRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovRaft(uint64(m.Term))
	n += 2
	return n
}

func sovRaft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRaft(x uint64) (n int) {
	return sovRaft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LogEntry) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idx", wireType)
			}
			m.Idx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Idx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Config = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("term")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("idx")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendEntries) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendEntries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendEntries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeaderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevLogIdx", wireType)
			}
			m.PrevLogIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevLogIdx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevLogTerm", wireType)
			}
			m.PrevLogTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrevLogTerm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &LogEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leade11RCommit", wireType)
			}
			m.Leade11RCommit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leade11RCommit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("term")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppendEntriesRes) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppendEntriesRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppendEntriesRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchIdx", wireType)
			}
			m.MatchIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchIdx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("term")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("success")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestVote) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CandidateId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRaft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CandidateId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogIdx", wireType)
			}
			m.LastLogIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogIdx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLogTerm", wireType)
			}
			m.LastLogTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLogTerm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarlyVote", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EarlyVote = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("term")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestVoteRes) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestVoteRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestVoteRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteGranted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VoteGranted = bool(v != 0)
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipRaft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRaft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("term")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("vote_granted")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRaft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRaft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRaft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRaft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRaft = fmt.Errorf("proto: unexpected end of group")
)
